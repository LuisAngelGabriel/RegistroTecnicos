@page "/Tecnico/Create"
@inject TecnicoService tecnicoService
@inject IToastService toastService
@inject NavigationManager navigationManager
@using RegistroTecnicoss.Models
@inject Blazored.Toast.Services.IToastService toastService
@rendermode InteractiveServer

<PageTitle>Registro de Técnicos</PageTitle>

<EditForm Model="Tecnico" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label class="text-danger">@Message</label>

    <div class="container mt-4">
        <div class="card shadow-lg">
            <div class="card-header bg-primary text-white text-center">
                <h5 class="mb-0">Registro de Técnicos</h5>
            </div>

            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">TécnicoId:</label>
                    <input class="form-control" value="@ProximoId" disabled />
                </div>

                <div class="mb-3">
                    <label class="form-label">Nombres:</label>
                    <InputText class="form-control" @bind-Value="Tecnico.Nombre" />
                    <ValidationMessage For="@(() => Tecnico.Nombre)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Sueldo por hora:</label>
                    <InputNumber class="form-control" @bind-Value="Tecnico.SueldoHora" />
                    <ValidationMessage For="@(() => Tecnico.SueldoHora)" />
                </div>
            </div>

            <div class="card-footer text-center">
                <button type="button" class="btn btn-outline-primary me-2" @onclick="Nuevo">
                    <i class="bi bi-plus-lg"></i> Nuevo
                </button>

                <button type="submit" class="btn btn-outline-success me-2">
                    <i class="bi bi-check-circle"></i> Guardar
                </button>

                <a href="/Tecnico/Index" class="btn btn-outline-danger">
                    <i class="bi bi-arrow-left"></i> Retroceder
                </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Models.Tecnico Tecnico { get; set; } = new Models.Tecnico();
    private string Message { get; set; } = string.Empty;
    private int ProximoId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProximoId = await ObtenerSiguienteId();
    }

    private async Task<int> ObtenerSiguienteId()
    {
        var lista = await tecnicoService.Listar(t => true);
        return (lista == null || !lista.Any()) ? 1 : lista.Max(t => t.TecnicoId) + 1;
    }

    private async Task Guardar()
    {
        Message = string.Empty;

        if (await tecnicoService.ExisteNombre(Tecnico.Nombre))
        {
            Message = "Ya existe un técnico con este nombre.";
            toastService.ShowError(Message);
            return;
        }

        var result = await tecnicoService.Guardar(Tecnico);
        if (result)
        {
            toastService.ShowSuccess("Técnico guardado correctamente.");
            await Nuevo();
        }
        else
        {
            toastService.ShowError("No se pudo guardar el técnico. Verifica los datos.");
        }
    }

    private async Task Nuevo()
    {
        Message = string.Empty;
        Tecnico = new Models.Tecnico();
        ProximoId = await ObtenerSiguienteId();
        StateHasChanged();
    }
}
