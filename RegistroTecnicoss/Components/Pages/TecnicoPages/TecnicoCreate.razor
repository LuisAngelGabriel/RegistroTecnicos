@page "/Tecnico/Create"
@inject TecnicoService tecnicoService
@inject Blazored.Toast.Services.IToastService toastService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Registro de Técnicos</PageTitle>

<div class="container mt-4">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white text-center">
            <h5 class="mb-0">Registro de Técnicos</h5>
        </div>

        <EditForm Model="Tecnico" OnValidSubmit="GuardarTecnico">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Técnico Id</label>
                    <InputNumber class="form-control" @bind-Value="Tecnico.TecnicoId" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Nombre</label>
                    <InputText class="form-control" @bind-Value="Tecnico.Nombre" />
                    <ValidationMessage For="@(() => Tecnico.Nombre)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Sueldo por hora</label>
                    <InputNumber class="form-control" @bind-Value="Tecnico.SueldoHora" />
                    <ValidationMessage For="@(() => Tecnico.SueldoHora)" />
                </div>
            </div>

            <div class="card-footer d-flex justify-content-center gap-3">
                <button type="button" class="btn btn-outline-primary" @onclick="LimpiarFormulario">
                    <i class="bi bi-plus-circle"></i> Limpiar
                </button>

                <button type="submit" class="btn btn-outline-success">
                    <i class="bi bi-check-circle"></i> Guardar
                </button>

                <a href="/Tecnico/Index" class="btn btn-outline-danger">
                    <i class="bi bi-arrow-left"></i> Volver
                </a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    public RegistroTecnicoss.Models.Tecnico Tecnico { get; set; } = new();
    public Models.Tecnico Tecnico { get; set; } = new Models.Tecnico();
    private string Message { get; set; } = string.Empty;
    private int ProximoId { get; set; }
    public RegistroTecnicoss.Models.Tecnicos Tecnico { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ProximoId = await ObtenerSiguienteId();
    }

        bool nombreDuplicado = await tecnicoService.ExisteNombre(Tecnico.Nombre);

    private async Task<int> ObtenerSiguienteId()
    {
        var lista = await tecnicoService.Listar(t => true);
        return (lista == null || !lista.Any()) ? 1 : lista.Max(t => t.TecnicoId) + 1;
    }

    private async Task GuardarTecnico()
    {
        bool nombreDuplicado = await tecnicoService.ExisteNombre(Tecnico.Nombre, 0);

        if (nombreDuplicado)
        {
            toastService.ShowError("Ya existe un técnico con este nombre. Por favor, elige otro nombre.");
            return;
        }

        bool guardado = await tecnicoService.Guardar(Tecnico);

        if (guardado)
        {
            toastService.ShowSuccess("Técnico registrado exitosamente.");
            LimpiarFormulario();
        }
        else
        {
            toastService.ShowError("No se pudo guardar el técnico. Intente nuevamente.");
        }
    }

    private void LimpiarFormulario()
    {
        Tecnico = new();
    }
}

}
