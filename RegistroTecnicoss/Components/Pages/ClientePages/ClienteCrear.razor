@page "/Cliente/Editar/{ClienteId:int}"
@using RegistroTecnicoss.Models
@inject ClienteService clienteService
@inject TecnicoService tecnicoService
@inject Blazored.Toast.Services.IToastService toastService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Editar Cliente</PageTitle>

@if (cliente == null)
{
    <div class="container mt-5">
        <div class="alert alert-warning text-center">
            <strong>Cargando cliente o no encontrado...</strong>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="card shadow-lg">
            <div class="card-header bg-primary text-white text-center">
                <h5 class="mb-0">Editar Cliente</h5>
            </div>

            <EditForm Model="cliente" OnValidSubmit="GuardarCliente">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Nombres</label>
                        <InputText class="form-control" @bind-Value="cliente.Nombres" />
                        <ValidationMessage For="@(() => cliente.Nombres)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Dirección</label>
                        <InputText class="form-control" @bind-Value="cliente.Direccion" />
                        <ValidationMessage For="@(() => cliente.Direccion)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">RNC</label>
                        <InputText class="form-control" @bind-Value="cliente.Rnc" />
                        <ValidationMessage For="@(() => cliente.Rnc)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Límite de Crédito</label>
                        <InputNumber class="form-control" @bind-Value="cliente.LimiteCredito" max="1000000" />
                        <ValidationMessage For="@(() => cliente.LimiteCredito)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-bold">Técnico Encargado</label>
                        <InputSelect class="form-select" @bind-Value="cliente.TecnicoId">
                            <option value="">-- Seleccione --</option>
                            @foreach (var t in tecnicos)
                            {
                                <option value="@t.TecnicoId">@t.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => cliente.TecnicoId)" />
                    </div>
                </div>

                <div class="card-footer d-flex justify-content-center gap-3">
                    <a href="/Cliente/Index" class="btn btn-outline-primary">
                        <i class="bi bi-arrow-left"></i> Volver
                    </a>
                    <button type="submit" class="btn btn-outline-success">
                        <i class="bi bi-check-circle"></i> Guardar
                    </button>
                    <a href="/Cliente/Eliminar/@cliente.ClienteId" class="btn btn-outline-danger">
                        <i class="bi bi-trash"></i> Eliminar
                    </a>
                </div>

            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter] public int ClienteId { get; set; }
    private Cliente? cliente;
    private List<Tecnico> tecnicos = new();

    protected override async Task OnInitializedAsync()
    {
        tecnicos = await tecnicoService.ListarTodo();
        cliente = await clienteService.Buscar(ClienteId);
        if (cliente == null)
        {
            toastService.ShowError($"Cliente con ID {ClienteId} no encontrado.");
            navigationManager.NavigateTo("/Cliente/Index");
﻿@page "/Cliente/Crear/{ClienteId:int?}"
@inject ClienteService ClienteService
@inject TecnicoService TecnicoService
@inject NavigationManager Navigation
@inject Blazored.Toast.Services.IToastService toastService
@rendermode InteractiveServer

<PageTitle>Registro de Clientes</PageTitle>

<div class="container mt-4">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white text-center">
            <h5 class="mb-0">Registro de Clientes</h5>
        </div>

        <EditForm Model="Cliente" OnValidSubmit="GuardarCliente">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Cliente ID</label>
                    <InputNumber class="form-control" @bind-Value="Cliente.ClienteId" disabled />
                </div>

                <div class="mb-3">
                    <label class="form-label">Nombres</label>
                    <InputText class="form-control" @bind-Value="Cliente.Nombres" />
                    <ValidationMessage For="@(() => Cliente.Nombres)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">RNC</label>
                    <InputText class="form-control" @bind-Value="Cliente.Rnc" />
                    <ValidationMessage For="@(() => Cliente.Rnc)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Dirección</label>
                    <InputText class="form-control" @bind-Value="Cliente.Direccion" />
                    <ValidationMessage For="@(() => Cliente.Direccion)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Límite de Crédito</label>
                    <InputNumber class="form-control" @bind-Value="Cliente.LimiteCredito" />
                    <ValidationMessage For="@(() => Cliente.LimiteCredito)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Técnico Encargado</label>
                    <InputSelect class="form-select" @bind-Value="Cliente.TecnicoId">
                        <option value="">Seleccione un técnico</option>
                        @foreach (var tecnico in ListaTecnicos)
                        {
                            <option value="@tecnico.TecnicoId">@tecnico.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Cliente.TecnicoId)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Fecha de Ingreso</label>
                    <InputDate class="form-control" @bind-Value="Cliente.FechaIngreso" />
                    <ValidationMessage For="@(() => Cliente.FechaIngreso)" />
                </div>
            </div>

            <div class="card-footer d-flex justify-content-center gap-3">
                <button type="button" class="btn btn-outline-primary" @onclick="LimpiarFormulario">
                    <i class="bi bi-plus-circle"></i> Limpiar
                </button>

                <button type="submit" class="btn btn-outline-success">
                    <i class="bi bi-check-circle"></i> Guardar
                </button>

                <a href="/Clientes/Index" class="btn btn-outline-danger">
                    <i class="bi bi-arrow-left"></i> Volver
                </a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public int? ClienteId { get; set; }

    public Clientes Cliente { get; set; } = new();
    public List<Tecnicos> ListaTecnicos { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ListaTecnicos = await TecnicoService.Listar(t => true);

        if (ClienteId.HasValue)
        {
            var clienteExistente = await ClienteService.Buscar(ClienteId.Value);
            if (clienteExistente != null)
                Cliente = clienteExistente;
        }
        else
        {
            Cliente.FechaIngreso = DateTime.Today;
        }
    }

    private async Task GuardarCliente()
    {
        if (await clienteService.ExisteNombreORnc(cliente!.Nombres, cliente.Rnc, cliente.ClienteId))
        {
            toastService.ShowError("Ya existe otro cliente con ese nombre o RNC.");
            return;
        }

        var ok = await clienteService.Guardar(cliente!);
        if (ok)
        {
            toastService.ShowSuccess("Cliente actualizado correctamente.");
            navigationManager.NavigateTo("/Cliente/Index");
        }
        else
        {
            toastService.ShowError("Error al actualizar el cliente.");
        }
    }
        var guardado = await ClienteService.Guardar(Cliente);

        if (guardado)
        {
            toastService.ShowSuccess("Cliente guardado exitosamente.");
            LimpiarFormulario();
        }
        else
        {
            toastService.ShowError("Error al guardar el cliente. Intente nuevamente.");
        }
    }

    private void LimpiarFormulario()
    {
        Cliente = new Clientes
        {
            FechaIngreso = DateTime.Today
        };
    }
}
